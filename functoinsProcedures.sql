-- Active: 1709043338501@@127.0.0.1@5432@ph@public
-- Active: 1699467625194@@127.0.0.1@5432@ph@public
/*
                    @Procedural Approach:
    1. Language Support: Supports procedural languages like PL/pgSQL, PL/Perl, PL/Python, etc.
    2. Complex Logic: Allows for complex logic using control structures like loops, conditionals, and exception handling.
    3. Variable Support: Supports variable declarations and manipulation within the procedural code.
    4. Stored Procedures/Functions: Provides the ability to create stored procedures or functions, 

                    @Non-Procedural Approach:
    1. Declarative Queries: Focuses on writing declarative SQL queries to retrieve, insert, update, or delete data from the database.
    2. Simplicity: Emphasizes simplicity by expressing operations in terms of what data is needed.
    3. SQL Functions: Supports SQL functions, which are single SQL statements that return a value or set of values.
    4. Performance: Can sometimes offer better performance for simple operations due to the optimized query execution plans generated by the database engine.
*/

SELECT * from employees

CREATE or REPLACE FUNCTION emp_count()
RETURNS INT
LANGUAGE SQL
as
$$
    SELECT count(*) from employees
$$

CREATE or REPLACE FUNCTION del_emp()
RETURNS void
LANGUAGE SQL
as
$$
    -- SELECT count(*) from employees
    delete from employees WHERE employee_id = 30
$$

SELECT emp_count()

SELECT del_emp()

CREATE or REPLACE FUNCTION del_emp_by_id(p_emp_id int)
RETURNS void
LANGUAGE SQL
as
$$
    -- SELECT count(*) from employees
    delete from employees WHERE employee_id = p_emp_id
$$

select del_emp_by_id(29)

CREATE Procedure remove_emp_var()
LANGUAGE plpgsql
AS
$$
DECLARE
test_var INT;
BEGIN
    SELECT employee_id INTO test_var from employees WHERE employee_id = 26;
    delete from employees WHERE employee_id = test_var;
END
$$

call remove_emp_var()

CREATE Procedure remove_emp_by_id(p_emp_id INT)
LANGUAGE plpgsql
AS
$$
DECLARE
test_var INT;
BEGIN
    SELECT employee_id INTO test_var from employees WHERE employee_id = p_emp_id;
    delete from employees WHERE employee_id = test_var;

    RAISE NOTICE 'Employee removed successfully!';
END
$$

call remove_emp_by_id(25)